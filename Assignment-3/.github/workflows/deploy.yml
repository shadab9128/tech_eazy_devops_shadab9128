name: Deploy (Terraform + SSH)

on:
  push:
    branches:
      - main
    tags:
      - 'deploy-*'
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage (Dev or Prod)'
        required: true
        default: 'Dev'

env:
  TF_DIR: terraform

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      - name: Terraform Validate & Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -out=tfplan -var="stage=${{ github.event.inputs.stage || 'Dev' }}" -var="key_name=${{ secrets.EC2_KEY_NAME }}" -var="ami_id=${{ secrets.AMI_ID }}" -var="s3_bucket_name=${{ secrets.S3_BUCKET_NAME }}" -input=false

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Get outputs
        id: outputs
        working-directory: ${{ env.TF_DIR }}
        run: |
          echo "alb_dns=$(terraform output -raw alb_dns)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket)" >> $GITHUB_OUTPUT

  deploy-and-verify:
    name: Post-deploy SSH + Health check
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for instances to initialize
        run: sleep 30

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Get ALB DNS from TF outputs
        working-directory: terraform
        run: echo "ALB_DNS=$(terraform output -raw alb_dns)" >> $GITHUB_ENV

      - name: Health Check ALB until healthy
        run: |
          echo "Checking http://${ALB_DNS}..."
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://${ALB_DNS})
            echo "Attempt $i -> HTTP $status"
            if [ "$status" = "200" ] || [ "$status" = "302" ] || [ "$status" = "301" ]; then
              echo "App is reachable"
              exit 0
            fi
            sleep 10
          done
          echo "App not reachable after retries"
          exit 1

      - name: SSH into one instance (optional) and tail logs
        if: success()
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ github.event.inputs.stage || 'Dev' }}-app" --query "Reservations[0].Instances[0].PublicIpAddress" --output text --region ${{ secrets.AWS_REGION }})
          echo "Connecting to $INSTANCE_IP"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${INSTANCE_IP} "tail -n 200 /home/ubuntu/techeazy.log || true"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

