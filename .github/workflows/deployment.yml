name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage"
        required: true
        default: "dev"

env:
  AWS_REGION: eu-north-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: Assignment-3/terraform
        run: terraform init

      - name: Import existing Target Group (optional)
        working-directory: Assignment-3/terraform
        run: |
          if ! terraform state list | grep -q "aws_lb_target_group.tg"; then
            terraform import aws_lb_target_group.tg ${{ secrets.TG_ARN }}
          fi

      - name: Import existing Listener (optional)
        working-directory: Assignment-3/terraform
        run: |
          if ! terraform state list | grep -q "aws_lb_listener.http_listener"; then
            terraform import aws_lb_listener.http_listener ${{ secrets.LISTENER_ARN }}
          fi

      - name: Terraform Plan
        working-directory: Assignment-3/terraform
        run: terraform plan -var="stage=${{ github.event.inputs.stage }}" -var="key_name=${{ vars.AWS_KEY_PAIR }}" -var="s3_bucket_name=techeazy-logs-devops"

      - name: Terraform Apply
        working-directory: Assignment-3/terraform
        run: terraform apply -auto-approve -var="stage=${{ github.event.inputs.stage }}" -var="key_name=${{ vars.AWS_KEY_PAIR }}" -var="s3_bucket_name=techeazy-logs-devops"

      - name: Get ALB DNS
        working-directory: Assignment-3/terraform
        id: alb
        run: echo "dns=$(terraform output -raw alb_dns)" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          echo "Waiting for application to be healthy..."
          timeout 300 bash -c 'until curl -f http://${{ steps.alb.outputs.dns }}/hello; do sleep 10; done'
          echo "Application is healthy!"

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment Complete!"
          echo "Stage: ${{ github.event.inputs.stage }}"
          echo "ALB DNS: ${{ steps.alb.outputs.dns }}"
          echo "Application URL: http://${{ steps.alb.outputs.dns }}/"
